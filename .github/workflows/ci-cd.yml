name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ vars.REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run Terraform Script
      run: |
        chmod +x Scripts/run-terraform.sh
        Scripts/run-terraform.sh

  kubernetes:
    name: 'Kubernetes Deployment'
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name "socksShop-eks-hakeem" --region ${{ env.AWS_REGION }}

    - name: Apply Kubernetes Manifests
      run: |
        chmod +x Scripts/apply-kubernetes.sh
        Scripts/apply-kubernetes.sh

  monitoring:
    name: 'Deploy Monitoring'
    needs: kubernetes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name "socksShop-eks-hakeem" --region ${{ env.AWS_REGION }}

    - name: Deploy Prometheus
      run: |
        chmod +x Scripts/deploy-prometheus.sh
        Scripts/deploy-prometheus.sh

    - name: Deploy Grafana
      run: |
        chmod +x Scripts/deploy-grafana.sh
        Scripts/deploy-grafana.sh

  alerting:
    name: 'Deploy Alerting'
    needs: monitoring
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name "socksShop-eks-hakeem" --region ${{ env.AWS_REGION }}

    - name: Deploy Alerting
      run: |
        chmod +x Scripts/alerting.sh
        Scripts/alerting.sh

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   terraform:
#     name: Terraform Deployment
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ vars.REGION }}

#       - name: Run Terraform script
#         run: |
#           chmod +x scripts/run-terraform.sh
#           scripts/run-terraform.sh

#   kubernetes:
#     name: Kubernetes Deployment
#     needs: terraform
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ vars.REGION }}

#       - name: Update kubeconfig
#         run: aws eks update-kubeconfig --name "socksShop-eks-hakeem" --region ${{ vars.REGION }}

#       - name: Check Kubernetes cluster
#         run: kubectl cluster-info

#       - name: Run Kubernetes script
#         run: |
#           chmod +x scripts/apply-kubernetes.sh
#           scripts/apply-kubernetes.sh

#   prometheus:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Kubernetes context
#         run: |
#           aws eks update-kubeconfig --region ${{ vars.REGION }} --name "socksShop-eks-hakeem"

#       - name: Make scripts executable
#         run: chmod +x scripts/*.sh

#       - name: Delay execution
#         run: sleep 300

#       - name: Deploy Prometheus
#         run: scripts/deploy-prometheus.sh

#   grafana:
#     name: Grafana Deployment
#     needs: prometheus
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Run Grafana script
#         run: |
#           chmod +x scripts/deploy-grafana.sh
#           scripts/deploy-grafana.sh

#   alerting:
#     name: Alerting Setup slack
#     needs: grafana
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Run Alerting script
#         run: |
#           chmod +x scripts/alerting.sh
#           scripts/alerting.sh

#   # logging:
#   #   name: Logging Setup
#   #   needs: alerting
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Checkout code
#   #       uses: actions/checkout@v2

#   #     - name: Run Logging script
#   #       run: |
#   #         chmod +x scripts/logging.sh
#   #         scripts/logging.sh

#   rollback:
#     name: Rollback
#     needs: [terraform, kubernetes, prometheus, grafana, alerting] # Ensures rollback runs after all previous jobs
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
        
#       - name: Make scripts executable
#         run: |
#           chmod +x scripts/rollback.sh
        
#       - name: Wait for 300 seconds
#         run: |
#           sleep 300
        
#       - name: Run Rollback script
#         run: |
#           scripts/rollback.sh
